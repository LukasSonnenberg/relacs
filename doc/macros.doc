/*!
\page macros Macros

\section macrocontent Content

- \ref macrofile
- \ref usingmacros


\section macrofile 1 Defining Macros

In the macros configuration file (defaults to \c macros.cfg)
you can specify macros for RELACS.
A macro is a sequence
of %RePros, filters, event detectors, messages, text browsers,
shell commands, and other macros. 
Each macro
is accesible by a button on the bottom of the RELACS GUI, by one of the function
keys \c ESC, \c F1, \c F2, ... \c F10, and from within the %Macros menu.

Each line starting with '#" is ignored (comments).


\subsection macrofilemacro 1.1 A Macro

A new macro is defined by a line sarting with '$' as the first character.
The word following the '$' character is the name of the macro as it appears
on the macro button and in the %Macros menu. The name can be followed
by one of the following keywords:

- \c startup  : this macro is the first one executed on startup of RELACS.
- \c shutdown : if you quit RELACS, this macro is called.
- \c startsession : on start of a new session this macro is executed.
- \c stopsession : stopping a session calls this macro.
- \c fallback : whenever a macro is finished, this macro is called.
- \c nokey : no function key is assigned to this macro.
- \c nobutton : this macro does not appear as a button 
                and does not get a function key.
- \c nomenu : this macro is not listed in the macros menu, 
              does not get a function key, and does not appear as a button.
- \c keep : if a new macro configuration file is loaded
	    this macro is not deleted.
- \c overwrite : if a new macro configuration file is loaded
	         this macro overwrites a kept macro with the same name.

The fallback macro gets the \c ESC key assigned, all other macros
get the function keys \c F1 - \c F10 in the order they are defined.
The shutdown macro does not execute %RePros.

A macro can have variables which are defined after a colon as ident=value pairs
separated by semicolons.

For example
\code 
$Search startup fallback: duration=40ms; pause=260ms
\endcode
defines a macro "Search" which is called as the first macro on
startup and whenever another macro is finished (usually you will
call a %RePro within such a macro that does not terminate itself).
It appears as a button with label "Search" and can be executed
by hitting the \c ESC key.
It has a single variable \a duration with default value \a 4s.

Variables of a macro may be defined on several succeeding lines.
Each line following the macro definition 
containing a '=' and not a colon ':' is interpreted as a variable
that is added to the macro.

\code 
$Search startup fallback
  duration=40ms
  pause=260ms
\endcode
is identical to the previous example.
The white space in front of the parameter may be ommited as well.


\subsection macrofileaction 1.2 Actions

Each line following the macro definition specifies 
one of the following actions:
- call a %RePro (\ref macrofileactionrepro)
- save data of a filter or event detector (\ref macrofileactionfilter)
- display a message (\ref macrofileactionmessage)
- open a text-browser (\ref macrofileactionbrowse)
- execute a shell command (\ref macrofileactionshell)
- call another macro (\ref macrofileactionmacro)
- switch to a different macro configuration (\ref macrofileactionswitch)
- start a session (\ref macrofileactionstartsession)
.
A macro can contain any number of actions.

A '!' as the first letter disables the action.
It can later on be enabled from the macros menu.

\subsubsection macrofileactionrepro 1.2.1 RePro

%RePros are specified by the optional keyword \c repro' 
and their name (identifier).
Optionally, the %RePro name is followed by a colon and a list
of parameter that are separated by semicolons or new lines.
The values of the parameter are passed to the %RePro's options.

Example:
\code
repro ResearchProgram1: parameter11=10ms; parameter12=20; 
ResearchProgram2
 parameter21=10ms
 parameter22=20; 
\endcode

You can use the Macro's variables for defining values of the %RePro's options
like this:
\code
ResearchProgram1: parameter1=$duration
\endcode
where \a duration is a macro variable.

You can define a whole range of values for a parameter in parenthesis.
For example
\code
ResearchProgram1: parameter1=(4..10)ms;
\endcode
results in seven calls of the %RePro "ResearchProgram1" with 
parameter1 getting the values 4, 5, 6, 7, 8, 9, and 10 ms.
In order to obtain the values 4, 6, 8, and 10 ms,
an increment different from one can be specified like this:
\code
ResearchProgram1: parameter1=(4..10..2)ms;
\endcode
An arbitrary sequence of values is separated by commas and 
can be intermixed with ranges:
(4,6..8,10) is expanded to 4,6,7,8,10.

You can specify in which order you want the sequence to be generated.
The default is 'up'. Alternatively you can specify 'down', 'alternate', 
or 'random' like this:
\code
ResearchProgram1: parameter1=(4..10..2,down)ms;
\endcode
generates 10, 8, 6, 4, 2.

Finally, you can specify an initial resolution.
The default resolution is one.
For example, defining an initial resolution of two
\code
ResearchProgram1: parameter1=(4..10..2,down,r:2)ms;
\endcode
produces the sequence 10, 6, 2, 8, 4.


\subsubsection macrofileactionfilter 1.2.2 Filter/Detector

Specifying a filter like this
\code
filter LcoalField-1: some parameter
\endcode
or a detector like this
\code
detector Spikes-1: some parameter
\endcode
executes the save() function of the filter/event detector for the trace/events
with name "LocalField-1"/"Spikes-1" and passes the string "some parameter" to this function.
This is ment to write some usefull information of the performance of the
filter or event detection into a file.
The parameter string may span multiple lines as long as each line contains a '='.
See the documentation of the Filter for more details.

\subsubsection macrofileactionmessage 1.2.3 Message

Messages are simple popup windows that display a text. 
They are specified by the \c message keyword. You can define
an optional timeout (in seconds) after which the window
is closed automatically.
An optional caption is displayed in the windows title bar.

For example
\code
message 5 Hello: This is the message text.
\endcode
opens a window with "Hello" in the title bar, 
displaying "This is amessage text.". The window is closed
after 5 seconds.

Any text enclosed by '$(' and ')' is interpreted as a command.
The command is executed in a shell and its standard output replaces
the command text. See also \ref macrofileactionshell.
The message text may extend over several lines, provided
each new line starts with at least one character of white space.

For example
\code
message The time is $(date).
\endcode
\c date is executed and $(date) is replaced by its output.
As a result, the following text is displayed in the window:
\code
The time is Wed Aug 10 13:59:06 CEST 2005.
\endcode

If the message text is empty, then no window is opened.

The following example macro displays a message after a session is stopped
only if the free disk space is less than 1000MB:
\code
$DISKSPACE stopsession nobutton
message $(DS=$(df -B 1M . | tail -n 1 | awk '{ print $4 }');  [ $DS -lt 1000 ] && echo "<h1>! Warning !</h1><h2>Less than <b>${DS}MB</b> of free disk space left!</h2>Please make backups and clean up to make room for the next recording!")
\endcode


\subsubsection macrofileactionbrowse 1.2.4 Browse

A text browser displays text from a file in a simple html capable browser.
The text browser is specified by the \c browse keyword.
An optional caption is displayed in the windows title bar.

For example
\code
browse RELACS Macros: doc/html/macros.html
\endcode
opens a text browser with "RELACS Macros" in the title bar, 
displaying the content of the file \c 'doc/html/macros.html'.

Any text enclosed by '$(' and ')' is interpreted as a command.
The command is executed in a shell and its standard output replaces
the command text.
See also \ref macrofileactionshell.
Note, however, that \c browse takes a file name as argument
and not the text it should display as \c message does.


\subsubsection macrofileactionshell 1.2.5 Shell

Shell comands are introduced by the \c shell keyword.

Example:
\code
shell cp foo.dat foo.dat.bak
\endcode

The following environment variables can be used from within a shell command:

- \c RELACSDATAPATH : The path where RELACS stores data.
- \c RELACSDEFAULTPATH : The default path where RELACS stores data (inbetween sessions).
- \c RELACSSESSIONTIME : The elapsed time of the current session formatted as a string.
- \c RELACSSESSIONSECONDS : The elapsed time of the current session in seconds.
- \c RELACSSESSIONSAVED : Equals "1" if the session gets saved.

The shell command may span several lines provided
each new line starts with at least one character of white space.


\subsubsection macrofileactionmacro 1.2.6 Macro

You can call another macro from within a macro.
Just give the name of the macro you want to call after
the keyword \c macro.

For example
\code
macro SAMs
\endcode
calls the macro "SAMs".

If the macro that is called has variables you can set the values
of those variables like this:
\code
macro SAMs: duration=42s
\endcode
Like for a %RePro, several line can be used for the variables.


\subsubsection macrofileactionswitch 1.2.7 Switch

A different set of macros can be loaded from a file.
Write the name of the file behind the keyword \c switch.

For example
\code
switch newmacros.cfg
\endcode
loads the macros defined in the file \c newmacros.cfg.

By default, all current macros are removed when loading / switiching to a
new macro configuration file.
However, individual macros can be excluded from beeing removed
by marking them with \c keep (see \ref macrofilemacro
and the \c overwrite keyword as well).


\subsubsection macrofileactionstartsession 1.2.8 Start Session

An action containing simply the keyword \c startsession
\code
startsession
\endcode
starts a new session, but \i without calling the \c startsession - macro
(see \ref macrofilemacro).


\subsection macrofileactionexample 1.3 Example

Finally, here is an example of a complete Macro definition:
\code
$SAMs: repeats=10
SAM: deltaf=5Hz; repeats=$repeats
SAM: deltaf=10Hz; repeats=$repeats
FICurve
message 4: You did it!
\endcode
The macro is called "SAMs" (for "Sinusoidal Amplitude Modulations").
It is an ordinary macro, since none of the keywords is specified
behind the name. Therefore it will get a button labeled "SAMs"
and one of the function keys \c F1 - \c F10.
It has a single variable \a repeats that is set by default to \a 10.
The macro calls subsequently twice the %RePro SAM with the \c deltaf option
set to 5 and 10Hz and the \c repeats option set to the value of the macro's
\a repeat variable.
The the %RePro FICurve is called with default parameter settings.
After the FICurve %RePro is finished the message "You did it!" is displayed
in a window that closes automatically after 4 seconds, and
the fallback Macro is called.


\section usingmacros 2 Using Macros

See \ref keys .

<hr>

Continue reading with \ref pluginconcept,
go to the top of this page \ref macros,
or go to the table of contents \ref maincontent

*/
