<chapter xml:id='createrepros'><title xml:id='createreprostitle'>Create RePro's</title>
	
		<para>RePro's (Reserach Programs) are the central elements of RELACS.
		In programming your own RePro you can create and output stimuli, analyze
		the recorded data and the detected events, save data and
		results in your preferred format, and display the data in the RePro's widget.
		For your own experiments you definitely want to define your
		own RePros to have RELACS doing the experiment on the click of a single button.
		The following sections explain how to write your own RePro.</para>

	<section xml:id='createcode'><title>Writing the Code - Basic Concepts</title>
	
		<para>RePro's are C++ classes that inherit the RePro base class from <filename>repro.h.</filename>
		If you are not familiar with programming C++ you may want to read
		<xref linkend='cppintro' endterm='cppintrotitle'/> first.
		However, you basically have to write code for a single function.
		In addition, RELACS provides some libraries with usefull predefined data types
		and functions.
		Most sophisticated C++ programming techniques are therefore hidden
		behind the scenes.</para>

		<para>Before you start writing your code, read <xref linkend='naming' endterm='namingtitle'/>.</para>

		<para>In the Pro's <emphasis>constructor</emphasis> you initialize all the variables,
		create the RePro's Options,
		and setup the widgets the RePro is using.
		Usually this is the MultiPlot widget which allows you to have
		several plots.
		The constructor of a RePro is called once at startup of RELACS.
		Therefore you do not want to allocate a lot of memory within
		the constructor.</para>

		<para>The <emphasis>main()</emphasis> function does all the work.
		In this function you usually read out the RePro's options,
		allocate necessary memory for the data analysis,
		initialize the plot widget, and
		display a message in the status bar first.
		Then you create a stimulus, 
		and repeatedly send the stimulus to the data acquisition board,
		<emphasis>sleep()</emphasis>, analyze the acquired data and detected events, 
		plot and save the results of the analysis,
		and modify the stimulus.
		Of course, you do not have to stick to this pattern.
		Everything else is possible as well.</para>

		<para>See also the documentation of the RePro - class for more details.</para>

		<section xml:id='reprooptions'><title>Options</title>
		
			<para>Usually a RePro has several parameter that determine 
			what the RePro is supposed to do.
			The Options class which is inherited by the RePro class
			thrugh the Config class provides a simple interface that allows
			to save those parameters to the configuration file,
			set them via a dialog window, or from a Macro definition.</para>

			<para>To add an option, do something like this 
			in the RePro's constructor:
			<programlisting>
addNumber( "duration", "Duration of signal", 0.1, 0.01, 1000.0, 0.01, "seconds", "ms" );
			</programlisting></para>

			<para>To retrieve the value of an option in the 
			RePro's <emphasis>main()</emphasis> function do:
			<programlisting>
double duration = number( "duration" );
			</programlisting></para>

			<para>Keep in mind, that the user could change the RePro's Options while the 
			RePro is running.</para>
		</section>

		<section xml:id='reprostimulus'><title>Stimuli</title>
			<para>To generate a stimulus, create an OutData variable:
			<programlisting>
OutData signal;
signal.setSampleRate( 20000.0 );
signal.sineWave( 5000.0, 1.0 );
signal.setIdent( "sine wave 5kHz 1s" );
signal.setTrace( "Left-Speaker" );
signal.setIntensity( 2.0 );
			</programlisting>
			In this example, a signal is created with a sampling rate of 
			20kHz that is a 5kHz sine wave of 1 second durration.
			The signal gets an identifier that is stored in
			the <filename>trigger.dat</filename> file where all stimuli are recorded.
			The intensity is used to set the attenuation of the signal.</para>

			<para>Send it to the data acquisition board with
			<programlisting>
write( signal );
			</programlisting></para>

			<para>There is another function which allows you to set 
			the output voltage of an output line to zero:
			<programlisting>
writeZero( "Right-Speaker" );
			</programlisting></para>
		</section>

		<section xml:id='repromessages'><title>Messages</title>
			<para>A message can be displayed in the status bar of RELACS
			with the <function>message</function> function:
			<programlisting>
message( "Loop: &lt;b>5&lt;/b>" );
			</programlisting>
			You can use simple markup to format the message.
			The message string is also written to standard error
			and logged into the RELACS log file.</para>
		</section>

		<section xml:id='reprowarnings'><title>Warnings</title>
			<para>You can open a simple window displaying a warning message
			with the <emphasis>warning()</emphasis> function:
			<programlisting>
warning( "Unable to create stimulus!" );
			</programlisting>
			The warning string is also written to standard error
			and logged into the RELACS log file.</para>

			<para>You can also specify a time in seconds after which the 
			warning window is closed automatically:
			<programlisting>
warning( "Unable to create stimulus!", 4.0 );
			</programlisting></para>
			<para>If you want to terminate the RePro right after issuing the warning
			you do
			<programlisting>
warning( "Unable to create stimulus!", 4.0 );
return Failed;
			</programlisting></para>
		</section>

		<section xml:id='reproadjust'><title>Adjust the Input Gain</title>

			<para>Many data acquisition boards have adjustable input gains.
			There are some functions provided by the RePro class
			that allow you to set the input gain of each input channel individually.
			For example, to adjust the input gain for the first data trace
			such that a maximum value of 2.54 can be read in, do
			<programlisting>
adjustGain( trace( 0 ), 2.54 );
activateGains();
			</programlisting></para>
		</section>
	</section>
	
	<section xml:id='walkthroughrepro'><title>Walktrough Example</title>

		<para>Create a class ExampleRePro 
		(replace in the following ExampleRePro by an appropriate name)
		which inherits RePro.
		Save it as file <filename>myrepro.h</filename>.
		Implement all the necessary methods in a file <filename>myrepro.cc</filename>.</para>
		
		<section xml:id='reproheaderfile'><title>Header File</title>

			<para>Any C/C++ header file should start with
			<programlisting>
#ifndef _RELACS_EXAMPLES_REPROEXAMPLE_H_
#define _RELACS_EXAMPLES_REPROEXAMPLE_H_
			</programlisting>
			to avoid double inclusion of that header file.
			Here, "EXAMPLES" is the name of the pluginset and "REPROEXAMPLE" 
			the name of the header file.
			At the very end of your header file you have to close the <literal>#ifndef</literal>
			with <literal>#endif</literal>.</para>

			<para>Then we need to include the header file 
                        <filename>repro.h</filename> header file
			<programlisting>
#include &lt;relacs/repro.h>
			</programlisting>
			work within the <link linkend='namespacerelacs.html'>relacs namespace</link>
			<programlisting>
using namespace relacs;
			</programlisting>
			and define the new RePro within the "examples" namespace
			<programlisting>
namespace examples {
			</programlisting>
			(replace "examples" by the name of your plugin set).</para>

			<para>Now we can define our new RePro class
			<programlisting>
class ReProExample : public RePro
			</programlisting>
			which inherits the RePro base class.
			Since the GUI of RELACS is using the Qt-library,
			we need tho call the  <literal>Q_OBJECT</literal> macro
			<programlisting>
Q_OBJECT
			</programlisting></para>

			<para>Then we can define some <literal>public</literal> member functions:
			<programlisting>
public:
			</programlisting></para>

			<para>First we need a constructor and a destructor
			<programlisting>
ReProExample( void );
~ReProExample( void );
			</programlisting>
			The constructor does not get any arguments.</para>

			<para>Most importantly, we need to implement the <emphasis>main()</emphasis> function:
			<programlisting>
virtual int main( void );
			</programlisting></para>

			<para>That is all we need in our RePro-class definition.
			Close the class and the namespace and don't forget the <literal>#endif</literal>:
			<programlisting>
};


}; /* namespace examples */

#endif /* ! _RELACS_EXAMPLES_REPROEXAMPLE_H_ */

			</programlisting></para>

		</section>

		<section xml:id='reprosourcefile'><title>Source File</title>

			<para>First, the header file needs to be included
                        <programlisting>
#include &lt; relacs/examples/reproexample.h>
			</programlisting>
			the relacs namespace to be opened
			<programlisting>
using namespace relacs;
			</programlisting>
			and the new RePro is defined within the "examples" namespace
			<programlisting>
namespace examples {
			</programlisting>
			(replace "examples" by the name of your plugin set).</para>

			<para>Then the constructor can be defined
			<programlisting>
ReProExample::ReProExample( void )
  : RePro( "ReProExample", "RePro - Example", "Examples", "Jan Benda", "1.0", "July 8, 2008" )
{
  // add some parameter as options:
  addNumber( "duration", "Duration", 0.1, 0.01, 1000.0, 0.02, "sec", "ms" );
}
			</programlisting></para>

			<para>By calling the constructor of the RePro class,
			we give the RePro a name ("ReProExample") that is used to access the
			RePro from the menus, config file, and macros,
			a title ("RePro - Example") that appears on top of the RePro widget,
			the name of the plugin set the RePro belongs to ("Examples"),
			the name of the person who wrote the code ("Jan Benda"),
			a version string ("1.0"),
			and the date of the last modification ("July 8, 2008").
			In the body of the constructor we just define a single option.
			This option can be modified from the RePro's dialog, the config file,
			and the macros.</para>

			<para>In our simple example, nothing needs to be done in the destructor
			<programlisting>
ReProExample::~ReProExample( void )
{
}
			</programlisting></para>
			
			<para>Now it is time for the <emphasis>main()</emphasis> function.
			This is the place where everything happens.
			<programlisting>
int ReProExample::main( void )
{
			</programlisting></para>

			<para>We read out the option
			<programlisting>
  // get options:
  double duration = number( "duration" );
			</programlisting>
			sleep for the desired duration
			<programlisting>
  sleep( duration );
			</programlisting>
			and return
			<programlisting>
  return Completed;
}
			</programlisting></para>

			<para>That's it.</para>
			<para>Of course this is a stupid and useless RePro.
			It simply does nothing for the requested time.</para>

			<para>Don't forget to add the following line to the source code:
			<programlisting>
addRePro( ReProExample );
			</programlisting>
			This line ensures that RELACS detects your class as a RePro.</para>

			<para>If there are several RePro classes implemented in a single <filename>.cc</filename> file
			you need for each of these RePros such a line:
			<programlisting>
addRePro( ExampleRePro1 );
addRePro( ExampleRePro2 );
addRePro( ExampleRePro3 );
			</programlisting></para>

			<para>Finally, the "examples" namespace needs to be closed
			<programlisting>
}; /* namespace examples */
			</programlisting>
			and the file generated by Qt's moc needs to be included
			<programlisting>
#include "moc_reproexample.cc"
			</programlisting></para>

		</section>
	</section>

	<section xml:id='setupmakefile'><title>Setup a Makefile</title>

		<para>To be written.</para>
	</section>
	
	<section xml:id='compilerepro'><title>Compile your RePro</title>

		<para>To be written. ... call make and make install ...</para>
	</section>
	
	<section xml:id='addrepro'><title>Adding a new RePro to RELACS</title>

		<para>Make sure that the path, where the shared library of your RePro resides,
		is specified in <varname>pluginpathes</varname> in <filename>relacs.cfg</filename>.</para>

		<para>You may want your RePro to appear as a button in the RELACS program.
		For that purpose edit the macros configuration file appropriately.
		Read <xref linkend='macros' endterm='macrostitle'/> for an introduction.</para>

<!--
		For succesfully finding and loading plugin libraries it is necessary that
		the environment variable <envar>LD_LIBRARY_PATH</envar> contains the directories
		of the plugins, and the libraries they depend on.
		If the libraries a plugin depends on reside in the same directory
		as the plugin, then it is sufficient to add the current working directory
		to <envar>LD_LIBRARY_PATH</envar> by adding a colon to the front
		(which is the default setting in the <command>relacs</command> skript).
		Additional pathes have to be added manually in the <command>relacs</command> script.
-->
	</section>
	
	<section xml:id='debugrepro'><title>Debugging your RePro</title>

		<para>If RELACS crashes (due to an error in a RePro), you may want to know why
		this happened. 
		You cannot use a debugger directly,
		since the LD_LIBRARY_PATH environment variable must be set beforehand
		such that the RELACS executable <command>relacsexec</command> finds the necessary libraries and plugins.</para>

		<para>For your convinience, the <command>relacs</command> script supports a <option>-d</option> and <option>-D</option> option
		that does all the necessary things and finally starts the GNU debugger <command>gdb</command>.
		<option>-d</option> directly runs RELACS from within the debugger, whereas <option>-D</option> starts
		the debugger but you have to run RELACS manually.
		If you do not want to use <command>gdb</command> as the debugger, you can edit
		the <varname>DEBUGGER</varname> variable in the <command>relacs</command> script.</para>

		<para>After RELACS crashed, <command>gdb</command> tells you where this happened,
		i.e. in which function on which line of which file.
		Usefull commands for <command>gdb</command> are:
		<itemizedlist>
		<listitem><para><command>bt</command> (backtrace): shows you all the functions on the stack </para></listitem>
		<listitem><para><command>up</command>, <command>down</command>: Select the calling or called function </para></listitem>
		<listitem><para><command>info thread</command>: List all the threads </para></listitem>
		<listitem><para><command>thread n</command>: Switch to thread <varname>n</varname> </para></listitem>
		<listitem><para><command>print</command>: Show the value of variables </para></listitem>
		<listitem><para><command>quit</command>: Quit the debugger </para></listitem>
		<listitem><para><command>help</command>: Help. You can call help with a command name in order 
					  to find out more about the command, like <command>help bt</command>. </para></listitem>
		</itemizedlist></para>
   </section>
</chapter>
