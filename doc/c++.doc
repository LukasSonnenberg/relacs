/*!
\page cppintro A short Introduction to C++

\section cppintrocontent Content

- \ref cpplinks (\ref cpptutorialslinks, \ref cppreferenceslinks)
- \ref stl
- \ref qthread


\section cpplinks Links to C++ Resources

\subsection cpptutorialslinks Tutorials

- C++ Language Tutorial <br>
  http://www.cplusplus.com/doc/tutorial/
- C++ Made Easy (includes STL and OpenGL) <br>
  http://www.cprogramming.com/tutorial.html
- Online C++ Tutorial <br>
  http://www.intap.net/~drw/cpp/
- Thinking in C++ <br>
  http://www.codeguru.com/cpp/tic/tic_c.shtml
- C++ Templates Tutorial <br>
  http://www.is.pku.edu.cn/~qzy/cpp/vc-stl/templates.htm
- A Modest STL Tutorial <br>
  http://www.cs.brown.edu/people/jak/proglang/cpp/stltut/
- The Code Project - some C++ algorithms with good explantions<br>
  http://www.codeproject.com/cpp/


\subsection cppreferenceslinks C++ References

- C/C++ Reference <br>
  http://www.cppreference.com/
- C++ Reference: iostream library <br>
  http://www.cplusplus.com/ref/iostream/
- C++ Language Reference <br>
  http://www.m0rph.com/c++/reference.shtml
- C++ Reference Guide <br>
  http://www.informit.com/isapi/guide~cplusplus/topics/index.asp
- IBM C and C++ References <br>
  http://www.lnf.infn.it/computing/doc/aixcxx/html/hgref.htm
- Bjarne Stroustrup <br>
  http://www.research.att.com/~bs/C++.html
- Standard Template Library (STL) <br>
  http://www.sgi.com/tech/stl/


\subsection creferenceslinks C References

- C Library Refernce Guide <br>
  http://www.acm.uiuc.edu/webmonkeys/book/c_guide/


\subsection cppdebugger Debugger

- GDB - The GNU Debugger <br>
  http://www.delorie.com/gnu/docs/gdb/gdb_toc.html


\section stl The Standard Template Library STL

The memory of a \c vector can only grow
(at least in the SGI implementation of the STL):
\code
  vector< double > a;    // a.capacity() == 0
  a.resize( 10 );        // a.capacity() == 10
  a.clear();             // a.capacity() == 10
  a.reserve( 45 );       // a.capacity() == 45
  a.reserve( 20 );       // a.capacity() == 45
  a.reserve( 0 );        // a.capacity() == 45
\endcode


\section qthread Threads in Qt

\subsection qthreadpix QPixmap and Threads

On Linux a QPixmap is associated directly with the X Server.
Therefore, you cannot manipulate a QPixmap from within a thread
without crashing the programm or 
at least getting some error messages from Xlib,
since this interferes with drawing operations from the GUI thread. 

Move all QPixmap manipulations (namely drawing on it with a QPainter)
into the paintEvent() and call paintEvent() asynchronously via
QThread::postEvent( this, new QPaintEvent( rect(), false ) );

If you still get warnings like "Xlib: unexpected async reply"
try calling QPainter::flush() a few times in between your drawing operations.

If necessary and possible, try to replace the QPixmap by QImage.
An QImage is device independent and does not interfere with X.


\subsection qtapplock The Qt Library Mutex

Using the Qt library mutex allows for calling Qt methods from threads other than the event thread
(qApp->lock() and qApp->unlock()).
However, the Qt library mutex seems not to be recursive.
Therefore, you must avoid nested calls of qApp->lock() from within a thread.
Otherwise the program hangs up.

The functions lockGUI() and unlockGUI() defined in RELACSPlugin
and thus availbale for the classes RePro, EventDetector, Session, and Control
wrap the calls to qApp->lock() and qApp->unlock():
\code
lockGUI();
doSomethingOnTheGUI()
unlockGUI();
\endcode

If possible avoid using the Qt library mutex. 
Posting an event is the much saver and cleaner method.

<hr>

Continue reading with \ref createcode
go to the top of this page \ref cppintro,
or go to the table of contents \ref maincontent

*/
