#!/bin/sh
# Jan Benda
# January 2001

###############################################################################
#
# diffrelacs
# 
#
# RELACS - RealTime ELectrophysiological data Acquisition, Control, and Stimulation
# Copyright (C) 2002-2007 Jan Benda <j.benda@biologie.hu-berlin.de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# RELACS is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

RELACSPATH="/home/jan/prj/setup/relacs/"

if [ $# -ge 1 ] && [ $1 = "-h" ]; then
  echo "usage: diffrelacs [-c] [-f]"
  echo "compare all source code files of the RELACS-project"
  echo "in" $RELACSPATH "with the ones of the current directory."
  echo "  -c     copy files from" $RELACSPATH "to the current directory"
  echo "  -c -f  copy files without prompting"
  echo
  echo "diffrelacs <file>"
  echo "compares <file> with the corresponding one in" $RELACSPATH "."
  exit 0
fi

if [ $# = 1 ] && [ -f $1 ]; then
  echo $1 "///// < here, > there /////"
  diff $1 $RELACSPATH$1
  exit 0
fi

for f in Makefile Macros.txt plugins/*.?? datahandling/*.?? newwidgets/*.?? repros/*.?? hardware/*.?? unusedrepros/*.?? christian/*.*[!~]
do
  if [ -f $RELACSPATH$f ]; then
    if ! diff --brief $f $RELACSPATH$f > /dev/null; then
      if [ $# -ge 1 -a "$1" = "-c" ]; then
        if [ $# -ge 2 -a "$2" = "-f" ]; then
          echo "cp $RELACSPATH$f $f";
          cp -f $RELACSPATH$f $f
        else
          cp -i $RELACSPATH$f $f
	fi
      else
        echo $f
      fi
    fi
  else
    echo "only here:" $f
  fi
done
