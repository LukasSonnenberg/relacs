#! /usr/bin/env bash

###############################################################################
#
# relacs
#
# RELACS - RealTime ELectrophysiological data Acquisition, Control, and Stimulation
# Copyright (C) 2002-2008 Jan Benda <j.benda@biologie.hu-berlin.de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
# 
# RELACS is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################


# Default working path:
WORKPATH="."

# Base of the config files (as passed to relacs by -s):
CONFIGBASE=""

# Default name of the log-file:
LOGFILE="relacs.log"
USELOGFILE="no"

# Dublicate log messages to stdout?
TEE="tee -a"
USETEE="no"

# Debug:
DEBUG="no"
DEBUGRUN="no"
DEBUGGER="libtool --mode=execute gdb"
COREFILE=""

# Email address for core dump and bug notifications:
EMAILADDRESS=""

# Core dumps?
COREDUMP="no"
COREDIR="coredumps"
COREMAILSUBJ="RELACS coredump"

# Bugs?
BUGS="no"
BUGDIR="bugs"
BUGMAILSUBJ="RELACS bug"

# Kernel messages (from dmesg)?
KERNELMESSAGES="no"


# Read arguments:
HELP="no";
for i; do
  case $1 in
    -s) shift
        CONFIGBASE="$1"
	shift ;;
    -w) shift
        if test "x$1" != "x"; then
          WORKPATH="$1"
          shift
        fi ;;
    -l) USELOGFILE="yes"
        shift
	if test "x${1:0:1}" != "x-"; then
          LOGFILE=$1
	  shift
	fi ;;
    -t) USELOGFILE="yes"
        USETEE="yes"
        shift ;;
    -d) DEBUG="yes"
        DEBUGRUN="no"
        USELOGFILE="no"
        shift ;;
    -D) DEBUG="yes"
        DEBUGRUN="yes"
        USELOGFILE="no"
        shift ;;
    -C) shift
        if test "x$1" != "x"; then
          COREFILE="$1"
          DEBUG="yes";
          USELOGFILE="no"
          shift
        fi ;;
    -c) COREDUMP="yes"
        ulimit -c unlimited 
        USELOGFILE="yes"
        shift ;;
    -b) BUGS="yes"
        USELOGFILE="yes"
        shift ;;
    -k) KERNELMESSAGES="yes"
        shift ;;
    -m) shift
        EMAILADDRESS="$1" 
        shift ;;
    -h) HELP="yes"
        break ;;
--help) HELP="yes"
        break ;;
  '-?') HELP="yes"
        break ;;
    --) break ;;
     *) break ;;
  esac
done


# Print help:
if test "x$HELP" = "xyes"; then
  RELACSSCRIPT=${0##*/}
  echo "$RELACSSCRIPT"
  echo
  echo "Script for running RELACS"
  echo "Jan Benda, 2003-2008"
  echo
  echo "Usage:"
  echo "  $RELACSSCRIPT [options]"
  echo
  echo "Options:"
  echo "  -w DIRECTORY   Working path (default '$WORKPATH')"
  echo "  -l [FILE]      Write RELACS messages from stdout and stderr to the log-file"
  echo "                 FILE (default '$LOGFILE')"
  echo "  -t             Use log file but also write messages to stdout "
  echo "  -d             Run RELACS from within a debugger (disables logfile)"
  echo "  -D             Start debugger without running RELACS"
  echo "  -C FILE        Start debugger with core-dump file FILE"
  echo "  -c             Save core dump in directory '$COREDIR' (enables -l)"
  echo "  -b             In case of warnings or errors, save log file in directory"
  echo "                 '$BUGDIR' (enables -l)"
  echo "  -k             In case of core dumps or bugs save the output of dmesg as well"
  echo "  -m EMAIL       Email notification about core dumps or bugs to EMAIL"
  echo "                 (default '$EMAILADDRESS')"
  echo "  --             The following options are passed directly"
  echo "                 to the RELACS executable"
  echo
  echo "  -3             Run in simulation mode"
  echo "  -s BASE        Use BASE as the basename for additional RELACS"
  echo "                 settings (configuration) files (i.e. BASE.cfg"
  echo "                 and BASEplugins.cfg)"
  echo "  -f             Run RELACS in fullscreen mode"
  echo
  echo "  --help         Print this help message and exit."
  echo "  --version      Print the version number of RELACS and exit."
  echo
  exit 0
fi

# Full path of the RELACS executable to be used:
RELACSEXEC="@abs_top_builddir@/src/relacsgui"

# Pathes to the RELACS libraries:
RELACSLIBPATHES="@abs_top_builddir@/daq/src/.libs\
:@abs_top_builddir@/datafile/src/.libs\
:@abs_top_builddir@/mplot/src/.libs\
:@abs_top_builddir@/numerics/src/.libs\
:@abs_top_builddir@/options/src/.libs\
:@abs_top_builddir@/widgets/src/.libs:"

PLUGINHOME='@abs_top_builddir@'

# Possible config files separated by '|':
# for local demo's use only the ones in the current directory.
CONFCOREFILES='@abs_builddir@/relacslocal.cfg'
CONFPLUGINSFILES='@abs_builddir@/relacsplugins.cfg'

### shouldn't that be better full file names? or both?
# default config files could/should sit in
# /etc/relacs/relacs.cfg
# /usr/share/relacs.cfg
# ~/.relacs/relacs.cfg
# ~/.relacs/myrelacs.cfg
# $WORKPATH/myrelacs.cfg
# /aa/bb/ccc/myrelacs.cfg


# Add user defined configuration files:
if test "x${CONFIGBASE}" != x; then
    CONFCOREFILES="${CONFCOREFILES}|${CONFIGBASE}.cfg"
    CONFPLUGINSFILES="${CONFPLUGINSFILES}|${CONFIGBASE}plugins.cfg"
fi

# Find top-most configuration file that contains pluginpathes:
SAVEIFS="$IFS"
IFS="|"
CONFARRAY=( $CONFCOREFILES )
IFS="$SAVEIFS"
for (( k=${#CONFARRAY[*]}-1; k >= 0; k-- )); do
    if test -f "${CONFARRAY[$k]}" && grep -q pluginpathes "${CONFARRAY[$k]}"; then
        CONFFILE="${CONFARRAY[$k]}"
        break
    fi
done
if test "x${CONFFILE}" = x; then
    echo "! warning: did not find a configuration file containing pluginpathes." 1>&2
fi
#echo "Using config file '${CONFFILE}'"
CONFDIR=${CONFFILE%/*}
if test "x$CONFDIR" = x; then
    CONFDIR="."
fi


# Find all directories we need to link plugins at runtime:
dirlist=
IFS="|"
for pattern in $(grep 'pluginpathes' < "${CONFFILE}" | sed -e 's/^[ \t]*pluginpathes:[ \t]*\(.*\)/\1/'); do
#    echo "check >$pattern<":
    # Ensure absolute path:
    case "${pattern}" in
    /*)
        # Absolute path pattern, nothing to be done:
#	echo "absolute path: >$pattern<"
        ;;

    ?*/*)
        # pattern relative to directory of config file:
        pattern="${CONFDIR}/${pattern}"
#	echo "relative path: >$pattern<"
        ;;

    *)
        # Plugin home relative file name pattern:
        pattern="${PLUGINHOME}/${pattern}"
#	echo "plugin home: >$pattern<"
        ;;
    esac

    # Add wildcard pattern:
    if test "x${pattern:${#pattern}-1}" = "x/"; then
        pattern="${pattern}*.so"
    fi

    # Resolve pattern and collect directories:
    for pluginfilename in $pattern; do
#	echo "potential plugin >$pluginfilename<"
        if test -f "${pluginfilename}"; then
            dir=${pluginfilename%/*}
#            echo "plugin found: ${pluginfilename}"
            dirlist="${dirlist}${dir}|"
        fi
    done

done
IFS="$SAVEIFS"

# Assemble directory list for LD_LIBRARY_PATH:
RELACSPLUGINPATHES=
while read dir ; do
    if test "x${dir}" = x; then
        continue
    fi
#    echo "directory >$dir<"
    RELACSPLUGINPATHES="${RELACSPLUGINPATHES}${dir}:"
done < <(sed "s/|/\n/g" <<< ${dirlist} | sort -u)
#echo "plugin pathes: >$RELACSPLUGINPATHES<"

# set the library path:
export LD_LIBRARY_PATH="${RELACSLIBPATHES}${RELACSPLUGINPATHES}${LD_LIBRARY_PATH}"
#IFS=":"
#echo "LD_LIBRARY_PATH:"
#for dir in $LD_LIBRARY_PATH; do
#  echo "  $dir"
#done
#IFS="$SAVEIFS"

# working path:
### This should go earlier because of configuration file pathes!!!!!????
cd "$WORKPATH"

# run RELACS:
if test "x$USELOGFILE" = "xyes" && test "x$LOGFILE" != "x"; then

  # write RELACS output into logfile
  
  # append old log-file to $LOGFILE.old:
  if test -f "$LOGFILE"; then
    cat $LOGFILE >> $LOGFILE.old
  fi

  # create new log-file:
  echo > $LOGFILE
  echo >> $LOGFILE
  echo "NEW RUN" >> $LOGFILE
  date >> $LOGFILE
  echo >> $LOGFILE

  # execute RELACS:
  if test "x$USETEE" = "xyes"; then
    "$RELACSEXEC" "--core-config-files=${CONFCOREFILES}" "--plugins-config-files=${CONFPLUGINSFILES}" $@ 2>&1 | $TEE $LOGFILE
  else
    "$RELACSEXEC" "--core-config-files=${CONFCOREFILES}" "--plugins-config-files=${CONFPLUGINSFILES}" $@ >> $LOGFILE 2>&1
  fi

else

  # do not write RELACS output into logfile

  if test "x$DEBUG" = "xyes"; then

    # debug RELACS

    if test "x$COREFILE" != "x"; then

      # run debugger on coredump:
      $DEBUGGER "$RELACSEXEC" "$COREFILE"

    else
 
      if test "x$DEBUGRUN" = "xyes"; then
        # start debugger with RELACS:
        $DEBUGGER --args "$RELACSEXEC" "--core-config-files=${CONFCOREFILES}" "--plugins-config-files=${CONFPLUGINSFILES}" $@
      else
        # run RELACS from within debugger:
        DEBUGCOM=relacsdebug$$
        echo "run" > $DEBUGCOM
        $DEBUGGER -x $DEBUGCOM --args "$RELACSEXEC" "--core-config-files=${CONFCOREFILES}" "--plugins-config-files=${CONFPLUGINSFILES}" $@
        rm $DEBUGCOM
      fi

    fi

    exit 0

  else

    # simply execute RELACS:
    "$RELACSEXEC" "--core-config-files=${CONFCOREFILES}" "--plugins-config-files=${CONFPLUGINSFILES}" $@

  fi

fi

SAVEDLOG="no"

# core dumps:
if test "x$COREDUMP" = "xyes"; then
  CF=$(ls -rtd core* | tail -n 1)
  if test -f "$CF"; then
    NCF=$COREDIR/core.$(date --iso-8601=sec)${CF#core}
    mkdir -p $COREDIR
    mv $CF $NCF
    if test "x$LOGFILE" != "x" && test -f "$LOGFILE"; then
      cp $LOGFILE $COREDIR/$LOGFILE.$(date --iso-8601=sec)
      egrep 'error|warning|panic|Xlib' $LOGFILE > tmp.txt
      SAVEDLOG="yes"
    fi
    if test "x$KERNELMESSAGES" = "xyes"; then
      dmesg > $COREDIR/dmesg.$(date --iso-8601=sec)
    fi
    if test "x$EMAILADDRESS" != "x"; then
      { echo
        echo "RELACS crashed with a core dump!"
	echo
        echo "You find the core dump in"
        echo "  $NCF"
        echo "and the corresponding log-file in"
        echo "  $COREDIR/$LOGFILE.$(date --iso-8601=sec)"
        if test "x$KERNELMESSAGES" = "xyes"; then
          echo "and the kernel messages in"
          echo "  $COREDIR/dmesg.$(date --iso-8601=sec)"
        fi
        echo
        if test "$(wc -l tmp.txt | awk '{print $1}' )" -gt 0; then
          echo "The log-file contains the following warnings and error messages:"
          echo
          cat tmp.txt
        else
          echo "The log-file contains no warnings or error messages."
        fi
        echo
        echo "This email was automatically generated from the 'relacs' script"
        echo "  $0"
        echo "The current working directory is"
        echo "  $PWD"
        echo
      } | mail -s "$COREMAILSUBJ" "$EMAILADDRESS"
    fi
    rm -f tmp.txt
  fi
fi

# bugs:
if test "x$BUGS" = "xyes" && test "x$LOGFILE" != "x" &&
   test -f "$LOGFILE" && test "x$SAVEDLOG" = "xno"; then
  egrep 'error|warning|panic|Xlib' $LOGFILE > tmp.txt
  if test "$(wc -l tmp.txt | awk '{print $1}' )" -gt 0; then
    mkdir -p $BUGDIR
    cp $LOGFILE $BUGDIR/$LOGFILE.$(date --iso-8601=sec)
    if test "x$KERNELMESSAGES" = "xyes"; then
      dmesg > $BUGDIR/dmesg.$(date --iso-8601=sec)
    fi
    if test "x$EMAILADDRESS" != "x"; then
      { echo
        echo "RELACS terminated with bugs!"
        echo
        echo "You find the log-file in"
        echo "  $BUGDIR/$LOGFILE.$(date --iso-8601=sec)"
        if test "x$KERNELMESSAGES" = "xyes"; then
          echo "and the kernel messages in"
          echo "  $BUGDIR/dmesg.$(date --iso-8601=sec)"
        fi
        echo
        echo "The log-file contains the following warnings and error messages:"
        echo
        cat tmp.txt
        echo
        echo "This email was automatically generated from the 'relacs' script"
        echo "  $0"
        echo "The current working directory is"
        echo "  $PWD"
        echo
      } | mail -s "$BUGMAILSUBJ" "$EMAILADDRESS"
    fi
  fi
  rm -f tmp.txt
fi

