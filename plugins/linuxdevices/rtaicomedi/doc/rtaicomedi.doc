/*!
\mainpage RTAI-comedi Relacs Plugins

\brief Plugins for dynamic clamp based on RTAI and comedi.


Comedi (linux control and measurement device interface) provides hardware drivers
to many data acquisition boards with a common library interface.
The RELACS comedi plugins access data acquisition boards by means of the comedi library.

For general information about comedi and a list of supported devices
see http://www.comedi.org

\section rtaicomedicontent Content
- \ref rtaicomediintro
- \ref installrtaikernel
- \ref installnewlib
- \ref installrtai
- \ref installcomedi
- \ref installrelacs
- \ref udev
- \ref kernelmessages
- \ref rtailinks


\section rtaicomediintro Introduction

For using dynamic clamp, i.e. some realtime computation, as it is
implemented by the DynClampAnalogInput and DynClampAnalogOutput
plugins, you need to install an RTAI-patched real-time linux
kernel, RTAI kernel modules, and comedi, as described in the following
sections.


\section installrtaikernel  Linux kernel and RTAI patch

\subsection patchkernel Download RTAI, a linux kernel, and patch the kernel

-# Login as root and cd into \c /usr/local/src:
\code
sudo su  # or su
cd /usr/local/src
\endcode
-# Download the latest RTAI (http://www.rtai.org) version into \c
/usr/local/src :
   - Either the latest RTAI release (check the RTAI homepage at http://www.rtai.org)
     \code
wget https://www.rtai.org/userfiles/downloads/RTAI/rtai-4.1.tar.bz2
tar xf rtai-4.1.tar.bz2
ln -sfn rtai-4.1 rtai
     \endcode
   - or the current development version from the official RTAI cvs repository
     \code
cvs -d:pserver:anonymous@cvs.gna.org:/cvs/rtai co magma
ln -sfn magma rtai
     \endcode
     (I got this running with the hal-linux-3.14.17-x86-6x.patch on an Intel i7 as of April 7, 2015)
   - or from Shahbaz Youssefi's RTAI clone on github:
     \code
git clone https://github.com/ShabbyX/RTAI.git
ln -sfn RTAI rtai
    \endcode
   .
\note Read the \c rtai/README.INSTALL and \c https://github.com/ShabbyX/RTAI/blob/master/README.INSTALL file!
-# Find out your CPU architecture:
\code
uname -m
\endcode
-# Check for available patches. Get a list of all patches for all architectures:
\code
find /usr/local/src/rtai/base/arch/ -name '*.patch' | sort
\endcode
The most recent patches for both intel and amd 32 and 64-bit systems (x86_64 and i386 architectures)
are in the \c x86/ directory.
Decide for a patch, and remember its version number: \c hal-linux-<kernel-version>-*.patch .
If you got RTAi from cvs then the patches with an "x" at the end should be preferred.
-# Download a 'vanilla' kernel, e.g. \c linux-<kernel-version>.tar.xz from http://www.kernel.org
  to \c /usr/src and unpack the kernel:
\code
cd /usr/src
wget https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.14.17.tar.xz
tar xf linux-3.14.17.tar.xz
mv linux-3.14.17 linux-3.14.17-rtai
ln -sfn linux-3.14.17-rtai linux
\endcode
-# Patch the kernel (use the patch file that matches the downloaded kernel)
\code
cd /usr/src/linux
patch -p1 < /usr/local/src/rtai/base/arch/x86/patches/hal-linux-3.14.17-x86-6x.patch
\endcode
-# Configure, compile, and install the kernel as described in the following section.


\subsection compilekernel Compile the rtai-patched linux kernel

-# Make sure the \c make, \c gcc, \c libncurses-dev, and \c zlib1g-dev packages are installed:
   \code
apt-get -y install make gcc libncurses-dev zlib1g-dev
   \endcode
   on a Debian system also install the kernel-package
   \code
apt-get -y install kernel-package
   \endcode

-# Clean up the kernel:
   \code
cd /usr/src/linux
make mrproper
make-kpkg clean  # on Debian system only
   \endcode

-# There are several strategies for getting a good real-time
   kernel. One somewhat simpler approach that most likely gives a
   running kernel, but also might result in bad or not so good
   real-time performance is described here. Alternatively, I
   recommend to consider the approach described in \c
   https://github.com/ShabbyX/RTAI/blob/master/README.INSTALL . For
   this you need some time to select the right driver modules, but the
   kernel will compile much faster and chances are good to get good performance.

   So, be warned! Here is the beginners way to make a real-time kernel:

   Reuse your current kernel configuration:
   \code
cp /boot/config-`uname -r` .config
make silentoldconfig
   \endcode
   Hit \c enter to all the (probably many) questions. If the
   configuration file is from the default kernel of your
   distribution this results in a large kernel that takes a long
   time to compile, since all device drivers get compiled, of which
   you only need a very few.

   Possible variations on this theme are:
   - Use the kernels default configuration:
     \code
make defconfig
     \endcode
   - Try to start out with the -rt or -lowlatency kernels and tak the \c .config file from there
   .
   In addition you might want to disable kernel modules that you do not need on your machine:
   \code
make localmodconfig
   \endcode
   This gives a small kernel that is compiled quite quickly.

-# The following steps 4. to 6. describe the elegant way to compile a linux kernel 
   on a Debian system using the kernel-package.
   You get a nice \c .deb file with the compiled kernel
   that you can install on other machines as well.
   See http://wiki.linuxcnc.org/cgi-bin/wiki.pl?Debian_Lenny_Compile_RTAI for more details.

   The normal way to compile a linux kernel is described starting at step 7. below.

-# Debian system: configure and build the kernel
   \code
export CONCURRENCY_LEVEL=$(grep -c "^processor" /proc/cpuinfo)  # the number of CPU cores you have
make-kpkg --initrd --append-to-version -rtai --revision 1.0 --config menuconfig kernel-image # kernel-headers kernel-source
   \endcode
   In the kernel configuration dialog you should check the following settings:
   - General setup: 
     - Make sure that "Local version" is empty in case you are using \c make-kpkg (Debian system).
       Otherwise set "Local version" to "-rtai".
     - Timers subsystem: 
       - Set "Timer tick handling" to "Periodic timer ticks" or "Idle dynticks system" (no tickless system!)
       - Deselect "Old Idle dynticks config"
       .
     .
   - Select "Enable loadable module support":
     - You may deselect "Module versioning support" 
       (If you select this option you have to copy the RTAI and comedi
       \c Module.symvers files around as described below. Selecting
       "Module versioning support" then has the advantage that you get
       rid of annoying warnings regarding undefined functions during
       compilation)
     .
   - Processor type and features: 
     - Select "Symmetric multi-processing support"
     - Select your "Subarchitecture Type" (PC-Compatible) - this option does not exist for newer kernels
     - Select the right Processor family (you find the name of your processor by looking at \c /proc/cpuinfo,
       check \c "help" to find out, which Processor family you have to select)
     - Disable "IBM Calgary IOMMU support"
     - Set the "Maximum numbers of CPUs" to the number of cores you have in your machine (see /proc/cpuinfo)
     - Disable "SMT (Hyperthreading) scheduler support"
     - Disable "Multi-core scheduler support"
     - Select "Preemption Model (Preemptible kernel (Low-Latency Desktop))"
     - Select "Interrupt pipeline"
     - "I-pipe legacy interface": enable for rtai-4.1 (and earlier?), disable for current cvs.
     - Set "Timer frequency" to 1000 Hz
     - Disable "Tickless System" (in newer kernel versions this has been moved to "General setup-Timers subsystem")
     - Disable "HPET Timer support" ?
   - Power management and ACPI options:
     - Disable "Suspend to RAM and standby"
     - Disable "Hibernation (aka 'suspend to disk')"
     - Disable "Run-time PM core functionality"
     - Enable "ACPI (Advanced Configuration and Power Interface) Support"
       - Disable everything execpt for:
       - Select "Power Management Timer Suppport" (if available)
       .
     - Disable "CPU Frequency scaling"
     - Disable "CPU idle PM support"
     - Disable "APM (Advanced Power Management) BIOS support"
     - Disable whatever else there is
     .
   - Device Drivers:
     - Disable IOMMU Hardware Support
     - Staging drivers:
       - Deselect "Data acquisition support (comedi)"
       .
     .
   - (Disable "Virtualization")
   .
   Leave the configuration dialog by pressing "Exit" until you are asked "Save kernel config?".
   Select "Yes".

   Then the new kernel is compiled - be patient.

-# Install the kernel
   \code
dpkg -i ../linux-image-3.14.17-rtai_1.0_amd64.deb # ../linux-headers-3.14.17-rtai_1.0_amd64.deb
   \endcode

   Then modify the boot menu as described in step 9 if necessary and reboot (step 10).

   Note: To uninstall the rtai kernel do 
   \code
apt-get remove linux-image-3.14.17-rtai
   \endcode
   This removes the files in \c /boot and the modules in \c /lib/modules .

-# Non-Debian System: Here is the non-Debian way to compile a linux kernel.

   First, you configure your kernel by calling
   \code
make menuconfig
   \endcode
   Use the settings described in step 5.

   Then compile and install the kernel
   \code
export MAKEFLAGS=" -j$(grep -c "^processor" /proc/cpuinfo)"
make
make modules
make modules_install
make install
  \endcode
  This takes quite a while.

-# If necessary, install third party kernel modules as well,
like for example the ones for your graphics board.
(The following is probably outdated) For your nvidia graphics board, download the driver from
http://www.nvidia.com/Download/index.aspx?lang=en-us.
Install it by calling
\code
$ sh NVIDIA-Linux-x86_64-190.42-pkg2.run -k 3.14.17-rtai -K
\endcode
(replace 3.14.17-rtai by the name of the kernel where you want to install the nvidia driver,
i.e. the string '\c uname \c -r' would return if that kernel is running).

-# Update your boot loader:
\code
update-grub
\endcode
    The output of \c update-grub should mention your new kernel image.
    You can configure \c grub \c v2 by editing the file \c /etc/default/grub .
    To get the boot menu that you need to select the kernel you want to boot
    you should for example unset the \c GRUB_HIDDEN_TIMEOUT and set the
    \c GRUB_TIMEOUT appropriately in that file. For example:
    \code
#GRUB_HIDDEN_TIMEOUT=0
#GRUB_HIDDEN_TIMEOUT_QUIET=true
GRUB_TIMEOUT=10
\endcode
    Also, if you do not like that grub puts your rtai kernel into a subsection called
    'Previous linux versions', then comment out the following lines in \c /etc/grub.d/10_linux
    \code
#  if [ "$list" ] && ! $in_submenu; then
#    echo "submenu \"Previous Linux versions\" {"
#    in_submenu=:
#  fi
\endcode
    After editing run \c update-grub to apply the changes.

-# Reboot the computer into the new kernel:
\code
reboot
\endcode
If this fails:
Try adding one or several of the advanced configuration and power interface (ACPI) or 
advanced programmable interrupt controller (APIC) options,
\c acpi=off \c pci=noacpi \c noapic \c nolapic \c lapic , or
\c libata.dma=0 to disable all dma transfers
to the kernel parameter in the \c kernel line of the
\c grub menu in \c /boot/grub/menu.lst (\c grub \c v1) or to the \c GRUB_CMDLINE_LINUX variable
in \c /etc/defaults/grub . 
After restart, check for the number of CPUs in \c /proc/cpuinfo - they might be reduced by these parameters!


\section installnewlib Newlib library

For dynamic clamp having math functions available in the kernel is quite handy. For this RTAI needs
on a 64-bit system the math library from the newlib library as a replacement for the standard \c libm.a .
As root:
\code
cd /usr/local/src
mkdir newlib
cd newlib
cvs -z 9 -d :pserver:anoncvs@sourceware.org:/cvs/src login  # password: anoncvs
cvs -z 9 -d :pserver:anoncvs@sourceware.org:/cvs/src co newlib
mkdir install
cd src/newlib
./configure --prefix=/usr/local/src/newlib/install --disable-shared CFLAGS="-O2 -mcmodel=kernel"
make
make install
\endcode


\section installrtai RTAI kernel modules

-# Make sure that you are root and you are really running your RTAI kernel!
   You can check with
   \code
uname -r
   \endcode

-# Change to the RTAI directory
   \code
cd /usr/local/src/rtai
   \endcode
-# In case you downloaded RTAI from https://github.com/ShabbyX/RTAI,
   you need to generate the configure script and makefiles first:
   \code
./autogen.sh
   \endcode
-# Configure RTAI by calling
   \code
make menuconfig
   \endcode
   Check the following settings:
   - General
     - "Installation directory": should be set to \c /usr/realtime
     - "Linux source tree": must be set to \c /usr/src/linux
     - "RTAI Documentation": deselect all documentation (if you don't you might get an error)
     - Select "Build RTAI testsuite"
     - Disable "Enable source compatibility mode"
     - "Inlining mode of user-space services": select "Eager inlining"
   - Machine
     - Select "Enable FPU support:
     - "Number of CPUs": set to the right value.
       If in doubt, look into the file \c /proc/cpuinfo or run
       \code
grep -c "^processor" /proc/cpuinfo
       \endcode
     .
   - Base system
     - Other features
       - Select "Mathfuns support in kernel"
       - 1 - NEWLIB (default), 2 - UCLIB, 3 - GLIBC: set to (1)
       - The installation directory of your chosen libm.a: set to "/usr/local/src/newlib/install/lib"
       .
     .
   - Add-ons
     - "Real Time COMEDI support in user space": leave unselected
     .
   .
   Then exit and save configuration.
   Watch the output while RTAI is configured for possible warnings and errors.
   In case this fails, you should check and/or edit the file \c .rtai_config
   and run \c .configure manually.

-# Compile and install
   \code
make
make install
   \endcode
   Known issues:
     - In case you get an error like: "-mpreferred-stack-boundary=3 is not between 4 and 12"
       Read http://mail.rtai.org/pipermail/rtai/2014-October/026542.html
     - In case you get an error like "/usr/include/features.h:323:26:
       fatal error: bits/predefs.h: No such file or directory" install
       the gcc-multilib package
       \code
apt-get install gcc-multilib
       \endcode
     - In case you get an error like
       "../../../base/include/asm/rtai_leds.h:24:20: error: asm/io.h:
       No such file or directory" then delete the "#include
       <asm/io.h>" line in the specified file and call \c make again.
     - (Old) rtai_lxrt errors:

       - If you get error messages like
         "../../../base/sched/liblxrt/.libs/liblxrt.so: undefined
         reference to `pthread_create'", i.e. undefined references to
         various pthread functions, then open \c
         base/sched/liblxrt/GNUmakefile in you favourite editor, find
         the line containing 'liblxrt_la_LIBADD' and add "-lpthread"
         to it so that this line looks like
         \code
liblxrt_la_LIBADD = -lpthread
         \endcode

       - In case of an error message like
         "../../../../base/include/rtai_lxrt.h:655:11: error:
         ‘CLONE_VM’ undeclared (first use in this function)" open \c
         base/include/rtai_lxrt.h in you favorite editor and add the
         line
         \code
#include <linux/sched.h>
         \endcode
         right before the line "#include <rtai_sched.h>"
       .
       In both cases do
       \code
cd base/sched/liblxrt
make clean
cd -
make
       \endcode

-# Test RTAI by loading some modules:
   \code
cd /usr/realtime/modules
insmod rtai_hal.ko
insmod rtai_sched.ko
insmod rtai_fifos.ko
insmod rtai_math.ko
   \endcode

   If this fails:

   First, check the output of
   \code
dmesg
   \endcode
   for some hints.

   Try adding one or several of the advanced configuration and power
   interface (ACPI) or advanced programmable interrupt controller
   (APIC) options, \c acpi=off \c pci=noacpi \c noapic \c nolapic \c
   lapic , to the kernel parameter in the \c kernel line of the \c
   grub menu in \c /boot/grub/menu.lst (\c grub \c v1) or to the \c
   GRUB_CMDLINE_LINUX variable in \c /etc/defaults/grub .  Recompile
   and install RTAI (make clean && make && make install && depmod -a).

   After restart, check for the number of CPUs in \c /proc/cpuinfo - they might be reduced by these parameters!

-# Run the RTAI latency test
   \code
cd /usr/realtime/testsuite/kern/latency
./run
   \endcode
   The output looks like this:
   \code
RTAI Testsuite - KERNEL latency (all data in nanoseconds)
RTH|    lat min|    ovl min|    lat avg|    lat max|    ovl max|   overruns
RTD|         17|         17|         84|        367|        367|          0
RTD|         69|         17|         82|       1054|       1054|          0
RTD|         32|         17|         85|       7618|       7618|          0
RTD|         44|         17|         86|       6336|       7618|          0
   \endcode
   If you have overruns, or the maximum latencies "lat max" are too
   high (<5000 ns is great, about 10000 is kind of ok, longer is really bad)
   then you need to improve you kernel by disabling some bad device drivers.
   See \c https://www.rtai.org/userfiles/documentation/documents/RTAI_User_Manual_34_03.pdf
   and \c https://github.com/ShabbyX/RTAI/blob/master/README.INSTALL for some hints. This is the art of creating a good real-time kernel...

   Also run the switch test:
   \code
cd /usr/realtime/testsuite/kern/switches
./run
   \endcode
   The output looks like this:
   \code
Apr  7 16:08:45 knifefish kernel: [  178.940333] 
Apr  7 16:08:45 knifefish kernel: [  178.940333] Wait for it ...
Apr  7 16:08:45 knifefish kernel: [  178.959986] 
Apr  7 16:08:45 knifefish kernel: [  178.959986] 
Apr  7 16:08:45 knifefish kernel: [  178.959986] FOR 10 TASKS: TIME 5 (ms), SUSP/RES SWITCHES 40000, SWITCH TIME (INCLUDING FULL FP SUPPORT) 145 (ns)
Apr  7 16:08:45 knifefish kernel: [  178.959988] 
Apr  7 16:08:45 knifefish kernel: [  178.959988] FOR 10 TASKS: TIME 6 (ms), SEM SIG/WAIT SWITCHES 40000, SWITCH TIME (INCLUDING FULL FP SUPPORT) 158 (ns)
Apr  7 16:08:45 knifefish kernel: [  178.959990] 
Apr  7 16:08:45 knifefish kernel: [  178.959990] FOR 10 TASKS: TIME 7 (ms), RPC/RCV-RET SWITCHES 40000, SWITCH TIME (INCLUDING FULL FP SUPPORT) 186 (ns)
   \endcode
   The reported switching times should be well below 1000ns.

   Finally, there is the "preempt" test:
   \code
cd /usr/realtime/testsuite/kern/preempt
./run
   \endcode

   To really check out the performance of the kernel you should run the test 
   under heavy load. That is, run some processes like
   - at least one "ping -f somewhere";
   - a "ping -f localhost";
   - a "top" on alpha screen and one on an X screen;
   - a "while "true"; do ls -lR / >list; done"
   - a "while "true"; cat /proc/interrupts; done"
   - dd if=/dev/hda2 of=/dev/hda3 bs=1000k &  # /dev/hda3 needs to be a free partition that is at least as large as /dev/hda2!!!
   .

-# For further improving the RTAI performance, you might want to reserve at least one CPU
   for RTAIIf on a multi-core machine. You can isolate CPUs by using the kernel parameter
   \code
isolcpus=0,1
   \endcode
   (for isolating the cores no. 0 and 1).
   See the file \c /usr/local/src/rtai/README.ISOLCPUS for more details.

\section installcomedi comedi data acquisition driver

For an RTAI kernel you definitely have to install the comedi drivers 
yourself according to the following instructions:

-# Login as root
-# Remove all comedi modules:
\code
IFSORG="$IFS"
IFS=","
for i in $(lsmod | grep "^comedi" | tail -n 1 | awk '{ print $4}'); do
  modprobe -r $i
done
IFS="$IFSORG"
\endcode
-# Remove all installed comedi stuff:
\code
apt-get purge libcomedi-dev libcomedi0
rm -r /lib/modules/`uname -r`/kernel/drivers/staging/comedi
depmod -a
\endcode
-# Install comedi from source.
Here are all commands that you can throw into a shell to completely install comedi:
\code
# install all required packages:
apt-get -y install gcc g++ git autoconf automake libtool bison flex libgsl0-dev libboost-program-options-dev

# download comedi sources:
cd /usr/local/src
git clone git://comedi.org/git/comedi/comedi.git
git clone git://comedi.org/git/comedi/comedilib.git
git clone git://comedi.org/git/comedi/comedi_calibrate.git
rm -r /lib/modules/`uname -r`/kernel/drivers/staging/comedi

# comedi:
cd /usr/local/src/comedi
cp /usr/realtime/modules/Module.symvers comedi/
./autogen.sh
PATH="$PATH:/usr/realtime/bin"
./configure --with-linuxdir=/usr/src/linux --with-rtaidir=/usr/realtime
make -j$(grep -c "^processor" /proc/cpuinfo)
make install
depmod -a
cp /usr/local/src/comedi/comedi/Module.symvers /lib/modules/`uname -r`/comedi/
cp /usr/local/src/comedi/include/linux/comedi.h /usr/include/linux/
cp /usr/local/src/comedi/include/linux/comedilib.h /usr/include/linux/

# comedilib:
cd /usr/local/src/comedilib
./autogen.sh
./configure --prefix=/usr --sysconfdir=/etc
make
make install

# comedi_calibrate:
cd /usr/local/src/comedi_calibrate
autoreconf -v -i
./configure --prefix=/usr --sysconfdir=/etc
make
make install

# setup udev permissions:
addgroup --system iocard
echo 'KERNEL=="comedi*", MODE="0660", GROUP="iocard"' > /etc/udev/rules.d/95-comedi.rules
\endcode
For details see the documentation for the comedi plugin set.


\section installrelacs Setting up dynamic clamp for RELACS
You should install \c RTAI and the \c comedi drivers and library prior to
configuring RELACS, so that ./configure can detect the presence of the
\c comedi library. If you install \c RTAI and \c comedi later, simply run \c
./configure and \c make again to detect comedi and compile the
corresponding plugins for RELACS.

-# Login as a normal user
-# If you are not member of the \c iocard group (necessary for accessing the comedi devices), 
then
\code
sudo adduser $USER iocard
\endcode
\note You need to log out and log in again to actually be member of that group (maybe it is enough just to open a new shell, though).
-# \c cd into the RELACS top-level directory and run
\code
./configure
\endcode
This should detect comedi and RTAI (see message towards the end of the output of \c configure).
-# Then get rid of any previously compiled comedi and dynamic clamp modules:
\code
cd plugins/linuxdevices/comedi
make clean
make -j$(grep -c "^processor" /proc/cpuinfo)
cd -
cd plugins/linuxdevices/rtaicomedi
make clean
\endcode
-# Select features of the dynamic clamp module by commenting or uncommenting the defines
at the top of the file \c plugins/linuxdevices/rtaicomedi/module/moduledef.h.
-# Compile the dynamic clamp plugins and the kernel module in 
\c plugins/linuxdevices/rtaicomedi:
\code
make -j$(grep -c "^processor" /proc/cpuinfo)
\endcode
-# If you get an "-mpreferred-stack-boundary" error uncomment line 4 in \c plugins/linuxdevices/rtaicomedi/module/Makefile.in and run \c make again.
-# Load the dynamic-clamp kernel module (as root):
\code
cd plugins/linuxdevices/rtaicomedi/module
sudo ./loadmodules.sh
cd -
\endcode
-# If you want to load the dynamic-clamp kernel module automatically during 
the boot process, then call the \c loadmodules.sh script from the script
\c /etc/rc.local . Simply add a line like this
\code
/where/ever/the/script/is/located/loadmodules.sh
\endcode
to \c /etc/rc.local (as root).
-# Run RELACS
\code
cd plugins/patchclamp
cp relacs.cfg.dynclamp relacs.cfg
./relacslocal
\endcode
-# Possible problems are:
  - Data acquisition does not start:
    - You might not have 
      sufficient permissions for reading and writing to the 
      \c /dev/comedi* devices. For a quick fix do
      as root
      \code
chmod a+rw /dev/comedi*
      \endcode
      See \ref udev below for a better solution.
    - The %comedi and rtai modules are not properly loaded.
    - The %comedi device is not configured yet.
    .
  - Performance is bad / RELACS regularly hangs for a few seconds / RELACS seems to be slowed down dramatically.
    - Disable APM and ACPI by adding \c "apm=off" and \c acpi=off to the kernel parameter in the \c kernel line of the
      \c grub menu in \c /boot/grub/menu.lst .
    .
  .
-# When developing model.c or even dynclampmodule.c, then
\code
cd plugins/linuxdevices/rtaicomedi
# whenever you changed something, do:
make
sudo module/reloadmodule.sh
\endcode

\section udev Setting up udev permissions for comedi device files

Once comedi is installed you also need to make sure that you (the
user) have appropriate permissions for accessing the comedi device
files. That is you need to be able to have read and write access to
the \c /dev/comedi* files. One elegant way to achieve this to create a
new group and tell udev to add the comedi device files to this group.

-# Login as root.
-# Create a new group "iocard":
\code
addgroup --system iocard
\endcode
-# Add udev rules to the /etc/udev/rules.d directory:
\code
echo 'KERNEL=="comedi*", MODE="0660", GROUP="iocard"' > /etc/udev/rules.d/95-comedi.rules
\endcode
-# Run
\code
udevadm trigger
\endcode
to apply your new udev rules
-# Add users to the "iocard" group:
\code
adduser \<username\> iocard
\endcode
After the next login, \c \<username\> is a member of the \c iocard group
and and has sufficient permissions to access the data acquisition boards through \c comedi.


\section kernelmessages Kernel messages
When fiddling around with kernel modules you might want to have a look 
at the kernel messages in \c /var/log/messages:
\code
tail -f /var/log/messages
\endcode
alternatively use
\code
less /var/log/messages
\endcode
and hit 'F'. Both commands will then show what was added 
to the messages immediately. Interrupt this by hitting \c ctrl-c.

In case you do not have a \c /var/log/messages file
(unfortunately the default in modern ubuntu based systems),
you have to enable it. As root open the file \c /etc/rsyslog.d/50-default.conf
in an editor. Remove the hash marks in front of the following lines and add '*.=err;':
\code
*.=info;*.=notice;*.=warn;*.=err;\\
        auth,authpriv.none;\\
        cron,daemon.none;\\
        mail,news.none          -/var/log/messages
\endcode
Then tell the system that you changed this file (still as root):
\code
restart rsyslog 
\endcode


\section rtailinks Links
- comedi: http://www.comedi.org
- rtai: http://www.rtai.org
- Kernel testing und fixing: http://wiki.linuxcnc.org/cgi-bin/wiki.pl?TroubleShooting
- Installation instructions and kernel configuration: http://wiki.linuxcnc.org/cgi-bin/emcinfo.pl?Debian_Lenny_Compile_RTAI
- Kernel configuration: http://wiki.linuxcnc.org/cgi-bin/wiki.pl?Ubuntu10.04Notes
- Install kernel header package: http://www.cyberciti.biz/faq/howto-install-kernel-headers-package/
- mpreferred-stack-boundary=3 issue: http://mail.rtai.org/pipermail/rtai/2013-December/026198.html
- HPET timer kernel option: http://mail.rtai.org/pipermail/rtai/2013-April/025511.html
- localmodconfig kernel make target: http://www.heise.de/open/artikel/Linux-Kernel-massgeschneidert-1402386.html
- Maybe this link is helpful to find good motherboards: http://wiki.linuxcnc.org/cgi-bin/wiki.pl?Latency-Test.
- Linux kernel crash dump: https://help.ubuntu.com/12.04/serverguide/kernel-crash-dump.html
- Crash debugger: http://docs.oracle.com/cd/E52668_01/E54669/html/ol7-s4-sysdumpa.html
*/
