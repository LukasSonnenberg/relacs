/*!
\mainpage RTAI-comedi Relacs Plugins

\brief Plugins for dynamic clamp based on RTAI and comedi.

\section rtaicomedicontent Content
- \ref rtaicomediintro
- \ref installrelacs
- \ref configdynamicclamp
- \ref simulatedynclamp

\section rtaicomediintro Introduction

For using dynamic clamp, i.e. some realtime computation, as it is
implemented by the DynClampAnalogInput and DynClampAnalogOutput
plugins, you need to install an RTAI-patched real-time linux
kernel, RTAI kernel modules, and comedi device drivers.

We recoomend to use the `makertaikernel.sh` script for building and
testing a RTAI-patched linux kernel provided at
https://github.com/relacs/makertai .
Read and follow the instructions at https://github.com/relacs/makertai#makertai .

Alternatively, you can do the installation manually as explained in
\ref manualinstall .

In either case, continue with building the dynamic clamp module of
RELACS as explained in \ref installrelacs and configuring RELACS
as explained in \ref configdynamicclamp .

If you only want to simulate a dynamic clamp, then skip all
installation procedures and just read \ref simulatedynclamp .



\section installrelacs Setting up dynamic clamp for RELACS

After you installed `RTAI` and the `comedi` drivers and library
run `./configure` and `make` again to detect comedi and compile the
corresponding plugins for RELACS.

-# Login as a normal user
-# If you are not member of the `iocard` group (necessary for accessing the comedi devices, 
   see \ref udev), then
   \code
sudo adduser $USER iocard
   \endcode
   \note You need to log out and log in again to actually be member of that group.
-# \note Calibrate you data acquisition board! 

   Do this once in a while on a warmed-up computer (>30min uptime).
   Depending on you data acquisition board you need to run
   \code
sudo comedi_calibrate
   \endcode
   or
   \code
sudo comedi_softcalibrate
   \endcode
   If you have only a single DAQ board then running these commands
   without any options is sufficient. See `man comedi_calibrate` for
   details.
-# `cd` into the RELACS top-level directory and run
   \code
./configure
   \endcode
   This should detect comedi and RTAI (see message towards the end of
   the output of `./configure`) .
-# Then get rid of any previously compiled comedi and dynamic clamp modules:
   \code
cd plugins/linuxdevices/comedi
make clean
make -j$(grep -c "^processor" /proc/cpuinfo)
cd -
cd plugins/linuxdevices/rtaicomedi
make clean
   \endcode
-# Select features of the dynamic clamp module by commenting or uncommenting the defines
at the top of the file `plugins/linuxdevices/rtaicomedi/module/moduledef.h`
or by enabling them by the --enable-dynclamp options for ./configure
(see ./configure --help for a description of all available options).
-# Implement your dynamic clamp model in the file `plugins/linuxdevices/rtaicomedi/module/model.c`.
-# Compile the dynamic clamp plugins and the kernel module
\code
cd plugins/linuxdevices/rtaicomedi
make -j$(grep -c "^processor" /proc/cpuinfo)
\endcode
-# If you get an "-mpreferred-stack-boundary" error uncomment line 4 in `plugins/linuxdevices/rtaicomedi/module/Makefile.in` and run `make` again.
-# Load the dynamic-clamp kernel module (as root):
\code
sudo module/loadmodules.sh
\endcode
-# Run RELACS in `plugins/linuxdevices/rtaicomedi` :
\code
./relacslocal
\endcode
or with the patchclamp plugins:
\code
cd plugins/patchclamp
cp relacs.cfg.dynclamp relacs.cfg
./relacslocal
\endcode
-# Possible problems are:
  - Data acquisition does not start:
    - You might not have 
      sufficient permissions for reading and writing to the 
      `/dev/comedi*` devices. For a quick fix do
      \code
sudo chmod a+rw /dev/comedi*
      \endcode
      See \ref udev for a better solution.
    - The %comedi and rtai modules are not properly loaded: check the output of `module/loadmodules.sh` and `dmesg`.
    - The %comedi device is not configured yet (should not be a problem with a recent comedi version).
    .
  - Performance is bad / RELACS regularly hangs for a few seconds / RELACS seems to be slowed down dramatically:
    - Improve your rtai kernel! See \ref configurekernel for instructions.
    .
  .
-# When developing your dynamic clamp model in `model.c` or if you dare to modify `dynclampmodule.c`, then
\code
# cd to rtaicomedi/, not rtaicomedi/module/ !
cd plugins/linuxdevices/rtaicomedi
# whenever you changed something, do:
make
sudo module/reloadmodule.sh
\endcode
Your `model.c` implementation can be tested without RTAI in the simulation mode of relacs, see \ref simulatedynclamp below.
-# If you want to load the dynamic-clamp kernel module automatically during 
the boot process, then call the `loadmodules.sh` script from the script
`/etc/rc.local` . Simply add a line like this
\code
/where/ever/the/script/is/located/loadmodules.sh
\endcode
to `/etc/rc.local` (as root).


\section configdynamicclamp Configure dynamic clamp in RELACS

Just make sure your `relacs.cfg` file has the following device sections:
\code
*Analog Input Devices
  Device1:
      plugin: [ DynClampAnalogInput, DynClampAISim ]
      device: /dev/comedi0
      ident : ai-1
      writecpudmalatency : true

*Analog Output Devices
  Device1:
      plugin: [ DynClampAnalogOutput, DynClampAOSim ]
      device: /dev/comedi0
      ident : ao-1
\endcode

The line `writecpudmalatency : true` is optional. When set
DynClampAnalogInput will write a zero to the `/dev/cpu_dma_latency`
file to make the CPUs stay in C0 state while RELACS is running. This
can replace the `idle=poll` kernel parameter, if you configured your
kernel to support "CPU idle PM support" (`CPU_IDLE`) and
`INTEL_IDLE` in the "CPU Idle" section of the "Power management and
ACPI options" menu.

\subsection inputtraces  Input traces 
As usual, input traces can be assigned to channels
of the analog input device. All the input traces the dynamic clamp
model requires (its `inputNames)` must be available.

The dynamic clamp plugins provide some additional input traces. They can be accessed like
normal analog input traces, but the channel nummber needs to be set to 1000 or larger.
The following three types of additional inputs are supported:
- Additional inputs as defined by the dynamic clamp model via its `paramInputNames`.
- Timing measurements, if they are enabled in moduledef.h:
  - `Interval` : the full period of each cycle of the dynamic clamp loop (always available)
  - `AI-time` : the time required by the analog input part
  - `AI-acquisition-time` : the time required by reading in a single analog input channel
  - `AI-conversion-time` : the time required to convert the read in value
  - `AO-time` : the time required by the analog output part
  - `Model-time` : the time required for calling computModel()
  - `Wait-time` : the time rt_task_wait_period() waits for the next period
  .
  all times are measured in seconds.
- For each analog output trace the dynamic clamp model is using (its `outputNames`)
  the following input traces are available:
  - `Stimulus-xxx` contains the stimulus a RePro wrote to this channel,
  - `Model-xxx` contains the value the model computed, and
  - `Total-xxx` contains the total requested output for this channel, i.e. Stimulus-xxx plus Model-xxx.
  - `Injected-xxx` contains the total output for this channel as it is written to the analog output.
    This equals `Total-xxx` multiplied by a possible correction factor and is only available with ENABLE_SYNCSEC
  .
  `xxx` is the name of the analog output trace. If the Injected or Total output exceeds the limits of the 
  maximum range of the data acquisition board, they are clipped to the minimum or maximum possible values.

You can monitor the performance of RTAI keeping the requested sampling
rate by adding the "Interval" input trace with a scale of 1e6 and unit "us".
Then set the `controlplugin` to `PeriodHistogram` at the top of the `relacs.cfg` file:
\code
*Settings
  Plugins:
      pluginpathes    : [ base*, calibration*, comedi*, rtaicomedi*, dynclampsim ]
      pluginhelppathes: ~
      controlplugin   : PeriodHistogram
\endcode

\subsection outputtraces Output traces 
As usual, output traces can be assigned to channels
of the analog output device. All the output traces the dynamic clamp
model requires (its `outputNames`) must be available.

Additional output traces as defined by the dynamic clamp model via its
`paramOutputNames` can be accessed like normal analog output traces by
their name.


\section simulatedynclamp Dynamic clamp simulation 
You can run the dynamic clamp in the relacs simulation mode as well.
This is in particular handy when it comes to testing your `model.c`
implementation without RTAI.

The relacs::DynClampAISim and relacs::DynClampAOSim modules do the trick.

Whenever you change `model.c` you need to recompile the
`DynClampAISim` and `DynClampAOSim` modules by calling `make` in the 
`plugins/linuxdevices/rtaicomedi` directory.
\code
cd plugins/linuxdevices/rtaicomedi
make
\endcode

Then call `relacs` with the `-3` option
\code
./relacslocal -3
\endcode
and enjoy the simulation.

*/
